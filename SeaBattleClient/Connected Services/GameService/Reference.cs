//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SeaBattleClient.GameService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/SeaBattleGame")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GetBattleIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GetIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GetNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SeaBattleClient.GameService.PlayerStatus GetStatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GetBattleID {
            get {
                return this.GetBattleIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GetBattleIDField, value) != true)) {
                    this.GetBattleIDField = value;
                    this.RaisePropertyChanged("GetBattleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GetID {
            get {
                return this.GetIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GetIDField, value) != true)) {
                    this.GetIDField = value;
                    this.RaisePropertyChanged("GetID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GetName {
            get {
                return this.GetNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GetNameField, value) != true)) {
                    this.GetNameField = value;
                    this.RaisePropertyChanged("GetName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SeaBattleClient.GameService.PlayerStatus GetStatus {
            get {
                return this.GetStatusField;
            }
            set {
                if ((this.GetStatusField.Equals(value) != true)) {
                    this.GetStatusField = value;
                    this.RaisePropertyChanged("GetStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerStatus", Namespace="http://schemas.datacontract.org/2004/07/SeaBattleGame")]
    public enum PlayerStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Waiting = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InGame = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Battle", Namespace="http://schemas.datacontract.org/2004/07/SeaBattleGame")]
    [System.SerializableAttribute()]
    public partial class Battle : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GetIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SeaBattleClient.GameService.Player GetPlayerOneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SeaBattleClient.GameService.Player GetPlayerTwoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SeaBattleClient.GameService.BattleStatus GetStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GetTurnPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GetWinnerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GetID {
            get {
                return this.GetIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GetIDField, value) != true)) {
                    this.GetIDField = value;
                    this.RaisePropertyChanged("GetID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SeaBattleClient.GameService.Player GetPlayerOne {
            get {
                return this.GetPlayerOneField;
            }
            set {
                if ((object.ReferenceEquals(this.GetPlayerOneField, value) != true)) {
                    this.GetPlayerOneField = value;
                    this.RaisePropertyChanged("GetPlayerOne");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SeaBattleClient.GameService.Player GetPlayerTwo {
            get {
                return this.GetPlayerTwoField;
            }
            set {
                if ((object.ReferenceEquals(this.GetPlayerTwoField, value) != true)) {
                    this.GetPlayerTwoField = value;
                    this.RaisePropertyChanged("GetPlayerTwo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SeaBattleClient.GameService.BattleStatus GetStatus {
            get {
                return this.GetStatusField;
            }
            set {
                if ((this.GetStatusField.Equals(value) != true)) {
                    this.GetStatusField = value;
                    this.RaisePropertyChanged("GetStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GetTurnPlayer {
            get {
                return this.GetTurnPlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.GetTurnPlayerField, value) != true)) {
                    this.GetTurnPlayerField = value;
                    this.RaisePropertyChanged("GetTurnPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GetWinner {
            get {
                return this.GetWinnerField;
            }
            set {
                if ((object.ReferenceEquals(this.GetWinnerField, value) != true)) {
                    this.GetWinnerField = value;
                    this.RaisePropertyChanged("GetWinner");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BattleStatus", Namespace="http://schemas.datacontract.org/2004/07/SeaBattleGame")]
    public enum BattleStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ShipsLocating = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InProcess = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Finished = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ships", Namespace="http://schemas.datacontract.org/2004/07/SeaBattleGame")]
    [System.SerializableAttribute()]
    public partial class Ships : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<SeaBattleClient.GameService.Ship> shipsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<SeaBattleClient.GameService.Ship> ships {
            get {
                return this.shipsField;
            }
            set {
                if ((object.ReferenceEquals(this.shipsField, value) != true)) {
                    this.shipsField = value;
                    this.RaisePropertyChanged("ships");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ship", Namespace="http://schemas.datacontract.org/2004/07/SeaBattleGame")]
    [System.SerializableAttribute()]
    public partial class Ship : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<SeaBattleClient.GameService.Cell> CellsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LengthField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<SeaBattleClient.GameService.Cell> Cells {
            get {
                return this.CellsField;
            }
            set {
                if ((object.ReferenceEquals(this.CellsField, value) != true)) {
                    this.CellsField = value;
                    this.RaisePropertyChanged("Cells");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Cell", Namespace="http://schemas.datacontract.org/2004/07/SeaBattleGame")]
    [System.SerializableAttribute()]
    public partial class Cell : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool hitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int xField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int yField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool hit {
            get {
                return this.hitField;
            }
            set {
                if ((this.hitField.Equals(value) != true)) {
                    this.hitField = value;
                    this.RaisePropertyChanged("hit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int x {
            get {
                return this.xField;
            }
            set {
                if ((this.xField.Equals(value) != true)) {
                    this.xField = value;
                    this.RaisePropertyChanged("x");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int y {
            get {
                return this.yField;
            }
            set {
                if ((this.yField.Equals(value) != true)) {
                    this.yField = value;
                    this.RaisePropertyChanged("y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindEnemy", ReplyAction="http://tempuri.org/IService1/FindEnemyResponse")]
        string FindEnemy(string myId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindEnemy", ReplyAction="http://tempuri.org/IService1/FindEnemyResponse")]
        System.Threading.Tasks.Task<string> FindEnemyAsync(string myId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateBattle", ReplyAction="http://tempuri.org/IService1/CreateBattleResponse")]
        string CreateBattle(SeaBattleClient.GameService.Player one, SeaBattleClient.GameService.Player two);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateBattle", ReplyAction="http://tempuri.org/IService1/CreateBattleResponse")]
        System.Threading.Tasks.Task<string> CreateBattleAsync(SeaBattleClient.GameService.Player one, SeaBattleClient.GameService.Player two);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetListBattle", ReplyAction="http://tempuri.org/IService1/GetListBattleResponse")]
        System.Collections.Generic.List<SeaBattleClient.GameService.Battle> GetListBattle();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetListBattle", ReplyAction="http://tempuri.org/IService1/GetListBattleResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<SeaBattleClient.GameService.Battle>> GetListBattleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StartBattle", ReplyAction="http://tempuri.org/IService1/StartBattleResponse")]
        bool StartBattle(string battleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StartBattle", ReplyAction="http://tempuri.org/IService1/StartBattleResponse")]
        System.Threading.Tasks.Task<bool> StartBattleAsync(string battleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateNewPlayer", ReplyAction="http://tempuri.org/IService1/CreateNewPlayerResponse")]
        string CreateNewPlayer(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateNewPlayer", ReplyAction="http://tempuri.org/IService1/CreateNewPlayerResponse")]
        System.Threading.Tasks.Task<string> CreateNewPlayerAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SignIn", ReplyAction="http://tempuri.org/IService1/SignInResponse")]
        string SignIn(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SignIn", ReplyAction="http://tempuri.org/IService1/SignInResponse")]
        System.Threading.Tasks.Task<string> SignInAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowOnlinePlayers", ReplyAction="http://tempuri.org/IService1/ShowOnlinePlayersResponse")]
        System.Collections.Generic.List<SeaBattleClient.GameService.Player> ShowOnlinePlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowOnlinePlayers", ReplyAction="http://tempuri.org/IService1/ShowOnlinePlayersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<SeaBattleClient.GameService.Player>> ShowOnlinePlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MakeShot", ReplyAction="http://tempuri.org/IService1/MakeShotResponse")]
        bool MakeShot(int x, int y, string playerID, string battleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MakeShot", ReplyAction="http://tempuri.org/IService1/MakeShotResponse")]
        System.Threading.Tasks.Task<bool> MakeShotAsync(int x, int y, string playerID, string battleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShipsLocate", ReplyAction="http://tempuri.org/IService1/ShipsLocateResponse")]
        bool ShipsLocate(string playerID, string battleID, SeaBattleClient.GameService.Ships ships);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShipsLocate", ReplyAction="http://tempuri.org/IService1/ShipsLocateResponse")]
        System.Threading.Tasks.Task<bool> ShipsLocateAsync(string playerID, string battleID, SeaBattleClient.GameService.Ships ships);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPlayerOne", ReplyAction="http://tempuri.org/IService1/GetPlayerOneResponse")]
        SeaBattleClient.GameService.Player GetPlayerOne(string battleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPlayerOne", ReplyAction="http://tempuri.org/IService1/GetPlayerOneResponse")]
        System.Threading.Tasks.Task<SeaBattleClient.GameService.Player> GetPlayerOneAsync(string battleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPlayerTwo", ReplyAction="http://tempuri.org/IService1/GetPlayerTwoResponse")]
        SeaBattleClient.GameService.Player GetPlayerTwo(string battleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPlayerTwo", ReplyAction="http://tempuri.org/IService1/GetPlayerTwoResponse")]
        System.Threading.Tasks.Task<SeaBattleClient.GameService.Player> GetPlayerTwoAsync(string battleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTurnPlayer", ReplyAction="http://tempuri.org/IService1/GetTurnPlayerResponse")]
        string GetTurnPlayer(string battleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTurnPlayer", ReplyAction="http://tempuri.org/IService1/GetTurnPlayerResponse")]
        System.Threading.Tasks.Task<string> GetTurnPlayerAsync(string battleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetWinner", ReplyAction="http://tempuri.org/IService1/GetWinnerResponse")]
        string GetWinner(string battleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetWinner", ReplyAction="http://tempuri.org/IService1/GetWinnerResponse")]
        System.Threading.Tasks.Task<string> GetWinnerAsync(string battleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExitGame", ReplyAction="http://tempuri.org/IService1/ExitGameResponse")]
        void ExitGame(string playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExitGame", ReplyAction="http://tempuri.org/IService1/ExitGameResponse")]
        System.Threading.Tasks.Task ExitGameAsync(string playerID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : SeaBattleClient.GameService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<SeaBattleClient.GameService.IService1>, SeaBattleClient.GameService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string FindEnemy(string myId) {
            return base.Channel.FindEnemy(myId);
        }
        
        public System.Threading.Tasks.Task<string> FindEnemyAsync(string myId) {
            return base.Channel.FindEnemyAsync(myId);
        }
        
        public string CreateBattle(SeaBattleClient.GameService.Player one, SeaBattleClient.GameService.Player two) {
            return base.Channel.CreateBattle(one, two);
        }
        
        public System.Threading.Tasks.Task<string> CreateBattleAsync(SeaBattleClient.GameService.Player one, SeaBattleClient.GameService.Player two) {
            return base.Channel.CreateBattleAsync(one, two);
        }
        
        public System.Collections.Generic.List<SeaBattleClient.GameService.Battle> GetListBattle() {
            return base.Channel.GetListBattle();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<SeaBattleClient.GameService.Battle>> GetListBattleAsync() {
            return base.Channel.GetListBattleAsync();
        }
        
        public bool StartBattle(string battleID) {
            return base.Channel.StartBattle(battleID);
        }
        
        public System.Threading.Tasks.Task<bool> StartBattleAsync(string battleID) {
            return base.Channel.StartBattleAsync(battleID);
        }
        
        public string CreateNewPlayer(string name) {
            return base.Channel.CreateNewPlayer(name);
        }
        
        public System.Threading.Tasks.Task<string> CreateNewPlayerAsync(string name) {
            return base.Channel.CreateNewPlayerAsync(name);
        }
        
        public string SignIn(string name) {
            return base.Channel.SignIn(name);
        }
        
        public System.Threading.Tasks.Task<string> SignInAsync(string name) {
            return base.Channel.SignInAsync(name);
        }
        
        public System.Collections.Generic.List<SeaBattleClient.GameService.Player> ShowOnlinePlayers() {
            return base.Channel.ShowOnlinePlayers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<SeaBattleClient.GameService.Player>> ShowOnlinePlayersAsync() {
            return base.Channel.ShowOnlinePlayersAsync();
        }
        
        public bool MakeShot(int x, int y, string playerID, string battleID) {
            return base.Channel.MakeShot(x, y, playerID, battleID);
        }
        
        public System.Threading.Tasks.Task<bool> MakeShotAsync(int x, int y, string playerID, string battleID) {
            return base.Channel.MakeShotAsync(x, y, playerID, battleID);
        }
        
        public bool ShipsLocate(string playerID, string battleID, SeaBattleClient.GameService.Ships ships) {
            return base.Channel.ShipsLocate(playerID, battleID, ships);
        }
        
        public System.Threading.Tasks.Task<bool> ShipsLocateAsync(string playerID, string battleID, SeaBattleClient.GameService.Ships ships) {
            return base.Channel.ShipsLocateAsync(playerID, battleID, ships);
        }
        
        public SeaBattleClient.GameService.Player GetPlayerOne(string battleID) {
            return base.Channel.GetPlayerOne(battleID);
        }
        
        public System.Threading.Tasks.Task<SeaBattleClient.GameService.Player> GetPlayerOneAsync(string battleID) {
            return base.Channel.GetPlayerOneAsync(battleID);
        }
        
        public SeaBattleClient.GameService.Player GetPlayerTwo(string battleID) {
            return base.Channel.GetPlayerTwo(battleID);
        }
        
        public System.Threading.Tasks.Task<SeaBattleClient.GameService.Player> GetPlayerTwoAsync(string battleID) {
            return base.Channel.GetPlayerTwoAsync(battleID);
        }
        
        public string GetTurnPlayer(string battleID) {
            return base.Channel.GetTurnPlayer(battleID);
        }
        
        public System.Threading.Tasks.Task<string> GetTurnPlayerAsync(string battleID) {
            return base.Channel.GetTurnPlayerAsync(battleID);
        }
        
        public string GetWinner(string battleID) {
            return base.Channel.GetWinner(battleID);
        }
        
        public System.Threading.Tasks.Task<string> GetWinnerAsync(string battleID) {
            return base.Channel.GetWinnerAsync(battleID);
        }
        
        public void ExitGame(string playerID) {
            base.Channel.ExitGame(playerID);
        }
        
        public System.Threading.Tasks.Task ExitGameAsync(string playerID) {
            return base.Channel.ExitGameAsync(playerID);
        }
    }
}
